<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ POS - ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ‡∏•‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏™</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Kanit', sans-serif; }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            animation: slideInRight 0.3s ease-out;
        }
        
        @keyframes slideInRight {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
        
        .notification.success { background: linear-gradient(135deg, #10b981, #059669); }
        .notification.error { background: linear-gradient(135deg, #ef4444, #dc2626); }
        .notification.info { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
        
        .tab-button.active {
            background: #ea580c;
            color: white;
        }
        
        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: bold;
        }
        
        .status-pending { background: #fef3c7; color: #92400e; }
        .status-preparing { background: #dbeafe; color: #1e40af; }
        .status-ready { background: #d1fae5; color: #065f46; }
        .status-delivered { background: #f3f4f6; color: #374151; }
        .status-cancelled { background: #fee2e2; color: #991b1b; }
        
        .connection-indicator {
            position: fixed;
            top: 20px;
            left: 20px;
            background: #10b981;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: bold;
            z-index: 1000;
        }
        
        .connection-indicator.disconnected {
            background: #ef4444;
        }
        
        .pulse-animation {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .order-card {
            transition: all 0.3s ease;
        }
        
        .order-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .menu-card {
            transition: all 0.3s ease;
        }
        
        .menu-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 30px rgba(0,0,0,0.15);
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Connection Status -->
    <div id="connectionStatus" class="connection-indicator">
        üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    </div>

    <!-- Header -->
    <header class="bg-white shadow-lg">
        <div class="container mx-auto px-4 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="text-4xl">üè™</div>
                    <div>
                        <h1 class="text-3xl font-bold text-gray-800">‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ POS</h1>
                        <p class="text-gray-600">‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ‡∏•‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏™ - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£</p>
                    </div>
                </div>
                <div class="flex items-center space-x-6">
                    <div class="text-right">
                        <div class="text-sm text-gray-600">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô</div>
                        <div class="font-bold text-green-600 flex items-center">
                            <div class="w-3 h-3 bg-green-500 rounded-full mr-2 pulse-animation"></div>
                            ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="text-sm text-gray-600">‡πÄ‡∏ß‡∏•‡∏≤</div>
                        <div class="font-bold text-gray-800" id="currentTime">--:--:--</div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav class="bg-orange-500 text-white shadow-lg">
        <div class="container mx-auto px-4">
            <div class="flex space-x-1">
                <button onclick="showTab('orders')" class="tab-button active px-8 py-4 font-medium hover:bg-orange-600 transition-all">
                    üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                </button>
                <button onclick="showTab('menu')" class="tab-button px-8 py-4 font-medium hover:bg-orange-600 transition-all">
                    üçΩÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
                </button>
                <button onclick="showTab('reports')" class="tab-button px-8 py-4 font-medium hover:bg-orange-600 transition-all">
                    üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                </button>
                <button onclick="showTab('settings')" class="tab-button px-8 py-4 font-medium hover:bg-orange-600 transition-all">
                    ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                </button>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container mx-auto px-4 py-6">
        <!-- Orders Tab -->
        <div id="ordersTab" class="tab-content">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-3xl font-bold text-gray-800">üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</h2>
                <div class="flex space-x-3">
                    <button onclick="refreshOrders()" class="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition-all">
                        üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
                    </button>
                    <button onclick="playNotificationSound()" class="bg-purple-500 text-white px-6 py-3 rounded-lg hover:bg-purple-600 transition-all">
                        üîî ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                    </button>
                </div>
            </div>

            <!-- Order Stats -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-yellow-500">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="text-3xl font-bold text-yellow-600" id="pendingCount">0</div>
                            <div class="text-gray-600 font-medium">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</div>
                        </div>
                        <div class="text-4xl text-yellow-500">‚è≥</div>
                    </div>
                </div>
                <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="text-3xl font-bold text-blue-600" id="preparingCount">0</div>
                            <div class="text-gray-600 font-medium">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°</div>
                        </div>
                        <div class="text-4xl text-blue-500">üë®‚Äçüç≥</div>
                    </div>
                </div>
                <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="text-3xl font-bold text-green-600" id="readyCount">0</div>
                            <div class="text-gray-600 font-medium">‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á</div>
                        </div>
                        <div class="text-4xl text-green-500">üöö</div>
                    </div>
                </div>
                <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-gray-500">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="text-3xl font-bold text-gray-600" id="completedCount">0</div>
                            <div class="text-gray-600 font-medium">‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</div>
                        </div>
                        <div class="text-4xl text-gray-500">‚úÖ</div>
                    </div>
                </div>
            </div>

            <!-- Orders List -->
            <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6" id="ordersList">
                <!-- Orders will be rendered here -->
            </div>
        </div>

        <!-- Menu Management Tab -->
        <div id="menuTab" class="tab-content hidden">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-3xl font-bold text-gray-800">üçΩÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π</h2>
                <button onclick="showAddMenuModal()" class="bg-green-500 text-white px-8 py-3 rounded-lg hover:bg-green-600 transition-all">
                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà
                </button>
            </div>

            <!-- Menu Categories -->
            <div class="flex space-x-4 mb-6">
                <button onclick="filterMenu('all')" class="category-filter active bg-orange-500 text-white px-6 py-2 rounded-full hover:bg-orange-600">
                    ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </button>
                <button onclick="filterMenu('‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å')" class="category-filter bg-gray-200 text-gray-700 px-6 py-2 rounded-full hover:bg-gray-300">
                    ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
                </button>
                <button onclick="filterMenu('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°')" class="category-filter bg-gray-200 text-gray-700 px-6 py-2 rounded-full hover:bg-gray-300">
                    ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°
                </button>
                <button onclick="filterMenu('‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô')" class="category-filter bg-gray-200 text-gray-700 px-6 py-2 rounded-full hover:bg-gray-300">
                    ‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô
                </button>
                <button onclick="filterMenu('‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á')" class="category-filter bg-gray-200 text-gray-700 px-6 py-2 rounded-full hover:bg-gray-300">
                    ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á
                </button>
            </div>

            <!-- Menu Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="menuGrid">
                <!-- Menus will be rendered here -->
            </div>
        </div>

        <!-- Reports Tab -->
        <div id="reportsTab" class="tab-content hidden">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢</h2>
            
            <!-- Sales Summary -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <div class="bg-white rounded-xl shadow-lg p-8 border-l-4 border-green-500">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="text-4xl font-bold text-green-600" id="todayRevenue">0‡∏ø</div>
                            <div class="text-gray-600 font-medium">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
                            <div class="text-sm text-green-600 mt-1">+12% ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô</div>
                        </div>
                        <div class="text-5xl text-green-500">üí∞</div>
                    </div>
                </div>
                <div class="bg-white rounded-xl shadow-lg p-8 border-l-4 border-blue-500">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="text-4xl font-bold text-blue-600" id="todayOrdersCount">0</div>
                            <div class="text-gray-600 font-medium">‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
                            <div class="text-sm text-blue-600 mt-1">+8% ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô</div>
                        </div>
                        <div class="text-5xl text-blue-500">üì¶</div>
                    </div>
                </div>
                <div class="bg-white rounded-xl shadow-lg p-8 border-l-4 border-orange-500">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="text-4xl font-bold text-orange-600" id="avgOrderValue">0‡∏ø</div>
                            <div class="text-gray-600 font-medium">‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</div>
                            <div class="text-sm text-orange-600 mt-1">+5% ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô</div>
                        </div>
                        <div class="text-5xl text-orange-500">‚≠ê</div>
                    </div>
                </div>
            </div>

            <!-- Charts and Popular Items -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Popular Items -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-xl font-bold mb-6 text-gray-800">üèÜ ‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</h3>
                    <div id="popularItems" class="space-y-4">
                        <!-- Popular items will be rendered here -->
                    </div>
                </div>

                <!-- Recent Activities -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-xl font-bold mb-6 text-gray-800">üîî ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h3>
                    <div id="recentActivities" class="space-y-3">
                        <!-- Recent activities will be rendered here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Settings Tab -->
        <div id="settingsTab" class="tab-content hidden">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h2>
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Store Settings -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-xl font-bold mb-4 text-gray-800">üè™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô</label>
                            <input type="text" id="storeName" value="‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ‡∏•‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏™" class="w-full p-3 border rounded-lg">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
                            <input type="text" id="storePhone" value="02-XXX-XXXX" class="w-full p-3 border rounded-lg">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
                            <textarea id="storeAddress" class="w-full p-3 border rounded-lg h-20">123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110</textarea>
                        </div>
                        <button onclick="saveStoreSettings()" class="w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600">
                            üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        </button>
                    </div>
                </div>

                <!-- Payment Settings -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-xl font-bold mb-4 text-gray-800">üí≥ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</label>
                            <select id="bankName" class="w-full p-3 border rounded-lg">
                                <option value="‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢</option>
                                <option value="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û</option>
                                <option value="‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå</option>
                                <option value="‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢</option>
                                <option value="‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï</option>
                                <option value="‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</label>
                            <input type="text" id="accountNumber" value="123-4-56789-0" class="w-full p-3 border rounded-lg" placeholder="xxx-x-xxxxx-x">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</label>
                            <input type="text" id="accountName" value="‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ‡∏•‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏™" class="w-full p-3 border rounded-lg">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">QR Code PromptPay</label>
                            <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-blue-400 transition-colors">
                                <input type="file" id="qrCodeUpload" accept="image/*" class="hidden" onchange="handleQRCodeUpload(event)">
                                <div id="qrCodePreview" class="mb-3">
                                    <div class="w-32 h-32 mx-auto bg-gray-100 rounded-lg flex items-center justify-center" id="qrPreviewContainer">
                                        <svg class="w-16 h-16 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M3 11h8V3H3v8zm2-6h4v4H5V5zM13 3v8h8V3h-8zm6 6h-4V5h4v4zM3 21h8v-8H3v8zm2-6h4v4H5v-4z"/>
                                            <path d="M18 13h-2v2h2v-2zM20 15h-2v2h2v-2zM16 15h-2v2h2v-2zM18 17h-2v2h2v-2zM20 19h-2v2h2v-2z"/>
                                        </svg>
                                    </div>
                                </div>
                                <button type="button" onclick="document.getElementById('qrCodeUpload').click()" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-all">
                                    üì± ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code
                                </button>
                                <p class="text-xs text-gray-500 mt-2">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JPG, PNG (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2MB)</p>
                            </div>
                        </div>
                        <button onclick="savePaymentSettings()" class="w-full bg-green-500 text-white py-3 rounded-lg hover:bg-green-600">
                            üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                        </button>
                    </div>
                </div>

                <!-- System Settings -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-xl font-bold mb-4 text-gray-800">üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h3>
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <span>‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà</span>
                            <label class="switch">
                                <input type="checkbox" id="soundNotification" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                        <div class="flex items-center justify-between">
                            <span>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</span>
                            <label class="switch">
                                <input type="checkbox" id="autoUpdate" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                        <div class="flex items-center justify-between">
                            <span>‡πÅ‡∏™‡∏î‡∏á QR Code ‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</span>
                            <label class="switch">
                                <input type="checkbox" id="showQRInOrder" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡∏ö‡∏≤‡∏ó)</label>
                            <input type="number" id="deliveryFee" value="30" class="w-full p-3 border rounded-lg">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ô‡∏≤‡∏ó‡∏µ)</label>
                            <input type="number" id="avgPrepTime" value="20" class="w-full p-3 border rounded-lg">
                        </div>
                        <button onclick="saveSystemSettings()" class="w-full bg-purple-500 text-white py-3 rounded-lg hover:bg-purple-600">
                            üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Add Menu Modal -->
    <div id="addMenuModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-xl p-8 w-full max-w-md mx-4 max-h-[90vh] overflow-y-auto">
            <h3 class="text-2xl font-bold mb-6 text-gray-800">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà</h3>
            <form id="addMenuForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-2">‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π</label>
                    <input type="text" id="menuName" required class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-orange-500">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</label>
                    <select id="menuCategory" required class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-orange-500">
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
                        <option value="‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å</option>
                        <option value="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°</option>
                        <option value="‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô">‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô</option>
                        <option value="‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)</label>
                    <input type="number" id="menuPrice" required class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-orange-500">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</label>
                    <textarea id="menuDescription" class="w-full p-3 border rounded-lg h-20 focus:ring-2 focus:ring-orange-500"></textarea>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° (‡∏ô‡∏≤‡∏ó‡∏µ)</label>
                    <input type="number" id="menuPrepTime" required class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-orange-500" value="15">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏ô‡∏π</label>
                    <div class="space-y-4">
                        <!-- Image Upload Section -->
                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-orange-400 transition-colors">
                            <input type="file" id="menuImageUpload" accept="image/*" class="hidden" onchange="handleImageUpload(event)">
                            <div id="imagePreview" class="mb-4">
                                <div class="w-32 h-32 mx-auto bg-gray-100 rounded-lg flex items-center justify-center text-4xl" id="previewContainer">
                                    üçΩÔ∏è
                                </div>
                            </div>
                            <button type="button" onclick="document.getElementById('menuImageUpload').click()" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-all">
                                üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                            </button>
                            <p class="text-sm text-gray-500 mt-2">‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</p>
                        </div>
                        
                        <!-- Icon Selection -->
                        <div>
                            <label class="block text-sm font-medium mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô</label>
                            <div class="grid grid-cols-6 gap-2">
                                <button type="button" onclick="selectIcon('üç§')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üç§</button>
                                <button type="button" onclick="selectIcon('üç≤')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üç≤</button>
                                <button type="button" onclick="selectIcon('üçú')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üçú</button>
                                <button type="button" onclick="selectIcon('üçõ')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üçõ</button>
                                <button type="button" onclick="selectIcon('üçù')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üçù</button>
                                <button type="button" onclick="selectIcon('üçï')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üçï</button>
                                <button type="button" onclick="selectIcon('üßã')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üßã</button>
                                <button type="button" onclick="selectIcon('‚òï')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">‚òï</button>
                                <button type="button" onclick="selectIcon('ü•§')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">ü•§</button>
                                <button type="button" onclick="selectIcon('üç∞')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üç∞</button>
                                <button type="button" onclick="selectIcon('üç™')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üç™</button>
                                <button type="button" onclick="selectIcon('üçΩÔ∏è')" class="icon-btn p-2 text-2xl border rounded hover:bg-gray-100">üçΩÔ∏è</button>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="selectedIcon" value="üçΩÔ∏è">
                    <input type="hidden" id="selectedImage" value="">
                </div>
                <div class="flex space-x-4 pt-4">
                    <button type="button" onclick="closeAddMenuModal()" class="flex-1 bg-gray-500 text-white py-3 rounded-lg hover:bg-gray-600 transition-all">
                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </button>
                    <button type="submit" class="flex-1 bg-green-500 text-white py-3 rounded-lg hover:bg-green-600 transition-all">
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // POS System JavaScript
        let currentTab = 'orders';
        let orders = [];
        let menus = [];
        let currentMenuFilter = 'all';
        let selectedIcon = 'üçΩÔ∏è';

        // Real-time Data Management
        class POSDataManager {
            constructor() {
                this.data = {
                    orders: [],
                    menus: [],
                    stats: {
                        todayOrders: 0,
                        todaySales: 0,
                        avgOrderValue: 0
                    },
                    activities: []
                };
                this.isConnected = true;
                this.init();
            }

            init() {
                this.loadData();
                this.startRealTimeUpdates();
                this.updateConnectionStatus();
            }

            loadData() {
                const savedData = localStorage.getItem('posSystemData');
                if (savedData) {
                    this.data = { ...this.data, ...JSON.parse(savedData) };
                } else {
                    // Initialize with sample data
                    this.data.menus = [
                        { id: 1, name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á', category: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å', price: 120, image: 'üç§', description: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô', prepTime: 15, available: true, isNew: false },
                        { id: 2, name: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', category: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å', price: 150, image: 'üç≤', description: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏£‡∏™‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô ‡πÄ‡∏ú‡πá‡∏î‡∏£‡πâ‡∏≠‡∏ô', prepTime: 20, available: true, isNew: false },
                        { id: 3, name: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢', category: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', price: 45, image: 'üßã', description: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏±‡∏ô', prepTime: 5, available: true, isNew: false },
                        { id: 4, name: '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢', category: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å', price: 80, image: 'ü•ó', description: '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡∏£‡∏™‡πÅ‡∏ã‡πà‡∏ö ‡πÄ‡∏ú‡πá‡∏î‡∏ï‡∏≤‡∏°‡πÉ‡∏à', prepTime: 10, available: true, isNew: true },
                        { id: 5, name: '‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏¢‡πá‡∏ô', category: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', price: 50, image: '‚òï', description: '‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏¢‡πá‡∏ô‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô', prepTime: 3, available: true, isNew: false }
                    ];
                    
                    // Sample orders
                    this.data.orders = [
                        {
                            id: '1',
                            orderNumber: this.generateOrderNumber(),
                            queueNumber: 1,
                            customerName: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
                            customerPhone: '081-234-5678',
                            items: [
                                { id: 1, name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á', price: 120, quantity: 2, totalPrice: 240, image: 'üç§' }
                            ],
                            subtotal: 240,
                            deliveryFee: 30,
                            total: 270,
                            status: 'pending',
                            createdAt: new Date().toISOString(),
                            estimatedTime: 25
                        },
                        {
                            id: '2',
                            orderNumber: this.generateOrderNumber(),
                            queueNumber: 2,
                            customerName: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
                            customerPhone: '082-345-6789',
                            items: [
                                { id: 2, name: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', price: 150, quantity: 1, totalPrice: 150, image: 'üç≤' },
                                { id: 3, name: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢', price: 45, quantity: 2, totalPrice: 90, image: 'üßã' }
                            ],
                            subtotal: 240,
                            deliveryFee: 30,
                            total: 270,
                            status: 'preparing',
                            createdAt: new Date(Date.now() - 600000).toISOString(),
                            estimatedTime: 15
                        }
                    ];
                    
                    this.saveData();
                }
                
                orders = this.data.orders;
                menus = this.data.menus;
                this.updateStats();
            }

            saveData() {
                localStorage.setItem('posSystemData', JSON.stringify(this.data));
            }

            generateOrderNumber() {
                return Math.floor(100000 + Math.random() * 900000).toString();
            }

            getNextQueueNumber() {
                const activeOrders = this.data.orders.filter(o => 
                    o.status !== 'delivered' && o.status !== 'cancelled'
                );
                return activeOrders.length > 0 ? Math.max(...activeOrders.map(o => o.queueNumber)) + 1 : 1;
            }

            addOrder(order) {
                order.orderNumber = this.generateOrderNumber();
                order.queueNumber = this.getNextQueueNumber();
                this.data.orders.unshift(order);
                this.saveData();
                this.updateStats();
                this.addActivity(`üÜï ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà #${order.orderNumber}`);
                this.playNotificationSound();
            }

            updateOrderStatus(orderId, status) {
                const order = this.data.orders.find(o => o.id === orderId);
                if (order) {
                    order.status = status;
                    this.saveData();
                    this.addActivity(`üìã ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ #${order.orderNumber}: ${this.getStatusText(status)}`);
                }
            }

            deleteOrder(orderId) {
                const orderIndex = this.data.orders.findIndex(o => o.id === orderId);
                if (orderIndex !== -1) {
                    const order = this.data.orders[orderIndex];
                    this.data.orders.splice(orderIndex, 1);
                    this.saveData();
                    this.updateStats();
                    this.addActivity(`üóëÔ∏è ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${order.orderNumber}`);
                }
            }

            addMenu(menu) {
                menu.id = Date.now();
                this.data.menus.push(menu);
                this.saveData();
                this.addActivity(`üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà: ${menu.name}`);
            }

            updateMenu(menuId, updates) {
                const menuIndex = this.data.menus.findIndex(m => m.id === menuId);
                if (menuIndex !== -1) {
                    this.data.menus[menuIndex] = { ...this.data.menus[menuIndex], ...updates };
                    this.saveData();
                    this.addActivity(`üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π: ${this.data.menus[menuIndex].name}`);
                }
            }

            addActivity(activity) {
                this.data.activities.unshift({
                    id: Date.now(),
                    message: activity,
                    timestamp: new Date().toISOString()
                });
                if (this.data.activities.length > 20) {
                    this.data.activities = this.data.activities.slice(0, 20);
                }
            }

            updateStats() {
                const today = new Date().toDateString();
                const todayOrders = this.data.orders.filter(o => 
                    new Date(o.createdAt).toDateString() === today
                );
                
                this.data.stats.todayOrders = todayOrders.length;
                this.data.stats.todaySales = todayOrders.reduce((sum, order) => sum + order.total, 0);
                this.data.stats.avgOrderValue = todayOrders.length > 0 ? 
                    Math.round(this.data.stats.todaySales / todayOrders.length) : 0;
            }

            getStatusText(status) {
                const statusMap = {
                    'pending': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                    'preparing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°',
                    'ready': '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á',
                    'delivered': '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß',
                    'cancelled': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
                };
                return statusMap[status] || status;
            }

            startRealTimeUpdates() {
                setInterval(() => {
                    this.updateConnectionStatus();
                    this.simulateNewOrders();
                }, 10000);

                // Update time
                setInterval(() => {
                    document.getElementById('currentTime').textContent = 
                        new Date().toLocaleTimeString('th-TH');
                }, 1000);
            }

            simulateNewOrders() {
                // Simulation disabled - orders will only come from real user input
                // This function is kept for future use if needed
                return;
            }

            updateConnectionStatus() {
                const statusElement = document.getElementById('connectionStatus');
                this.isConnected = Math.random() > 0.05; // 95% uptime
                
                if (this.isConnected) {
                    statusElement.textContent = 'üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß';
                    statusElement.className = 'connection-indicator';
                } else {
                    statusElement.textContent = 'üî¥ ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
                    statusElement.className = 'connection-indicator disconnected';
                }
            }

            playNotificationSound() {
                // Create notification sound using Web Audio API
                try {
                    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    const oscillator = audioContext.createOscillator();
                    const gainNode = audioContext.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(audioContext.destination);
                    
                    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
                    oscillator.frequency.setValueAtTime(800, audioContext.currentTime + 0.2);
                    
                    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
                    
                    oscillator.start(audioContext.currentTime);
                    oscillator.stop(audioContext.currentTime + 0.3);
                } catch (e) {
                    console.log('Audio not supported');
                }
            }
        }

        // Initialize POS Data Manager
        const posDataManager = new POSDataManager();

        // Tab Management
        function showTab(tabName) {
            currentTab = tabName;
            
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.add('hidden');
            });
            
            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.remove('hidden');
            
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Render content
            if (tabName === 'orders') renderOrders();
            if (tabName === 'menu') renderMenus();
            if (tabName === 'reports') renderReports();
        }

        // Orders Management
        function renderOrders() {
            const ordersList = document.getElementById('ordersList');
            
            // Update stats
            const pending = orders.filter(o => o.status === 'pending').length;
            const preparing = orders.filter(o => o.status === 'preparing').length;
            const ready = orders.filter(o => o.status === 'ready').length;
            const completed = orders.filter(o => o.status === 'delivered').length;
            
            document.getElementById('pendingCount').textContent = pending;
            document.getElementById('preparingCount').textContent = preparing;
            document.getElementById('readyCount').textContent = ready;
            document.getElementById('completedCount').textContent = completed;
            
            // Render active orders - sorted by queue number and time
            const activeOrders = orders
                .filter(o => o.status !== 'delivered' && o.status !== 'cancelled')
                .sort((a, b) => {
                    // First sort by queue number
                    if (a.queueNumber !== b.queueNumber) {
                        return a.queueNumber - b.queueNumber;
                    }
                    // Then by creation time (oldest first)
                    return new Date(a.createdAt) - new Date(b.createdAt);
                });
            
            if (activeOrders.length === 0) {
                ordersList.innerHTML = `
                    <div class="col-span-full text-center py-12">
                        <div class="text-6xl mb-4">üìã</div>
                        <h3 class="text-2xl font-bold mb-2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h3>
                        <p class="text-gray-600">‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
                    </div>
                `;
                return;
            }
            
            ordersList.innerHTML = activeOrders.map(order => `
                <div class="order-card bg-white rounded-xl shadow-lg p-6 border-l-4 ${getBorderColor(order.status)}">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h3 class="text-xl font-bold text-gray-800">#${order.orderNumber}</h3>
                            <p class="text-gray-600">‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà ${order.queueNumber} ‚Ä¢ ${order.customerName}</p>
                            <p class="text-sm text-gray-500">${new Date(order.createdAt).toLocaleString('th-TH')}</p>
                        </div>
                        <div class="status-badge status-${order.status}">${posDataManager.getStatusText(order.status)}</div>
                    </div>
                    
                    <div class="space-y-2 mb-4">
                        ${order.items.map((item, itemIndex) => `
                            <div class="flex justify-between items-center text-sm bg-gray-50 p-2 rounded">
                                <span class="flex items-center">
                                    <span class="text-lg mr-2">${item.image}</span>
                                    ${item.name} x${item.quantity}
                                </span>
                                <div class="flex items-center space-x-2">
                                    <span class="font-bold">${item.totalPrice}‡∏ø</span>
                                    <button onclick="removeOrderItem('${order.id}', ${itemIndex})" class="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600 transition-all" title="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ">
                                        ‚úï
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                    
                    <div class="border-t pt-3 mb-4">
                        <div class="flex justify-between font-bold text-lg">
                            <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                            <span class="text-orange-600">${order.total}‡∏ø</span>
                        </div>
                        ${getPaymentInfo(order)}
                    </div>
                    
                    <div class="space-y-2">
                        <div class="flex space-x-2 mb-2">
                            <select onchange="updateOrderStatus('${order.id}', this.value)" class="flex-1 p-2 border rounded-lg text-sm">
                                <option value="">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
                                <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
                                <option value="preparing" ${order.status === 'preparing' ? 'selected' : ''}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°</option>
                                <option value="ready" ${order.status === 'ready' ? 'selected' : ''}>‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á</option>
                                <option value="delivered" ${order.status === 'delivered' ? 'selected' : ''}>‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</option>
                                <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
                            </select>
                            <button onclick="deleteOrder('${order.id}')" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 text-sm transition-all">
                                üóëÔ∏è
                            </button>
                        </div>
                        ${getOrderActions(order)}
                    </div>
                </div>
            `).join('');
        }

        function getBorderColor(status) {
            const colorMap = {
                'pending': 'border-yellow-500',
                'preparing': 'border-blue-500',
                'ready': 'border-green-500',
                'delivered': 'border-gray-500',
                'cancelled': 'border-red-500'
            };
            return colorMap[status] || 'border-gray-300';
        }

        function getOrderActions(order) {
            let actions = '';
            
            if (order.status === 'pending') {
                actions += `
                    <button onclick="updateOrderStatus('${order.id}', 'preparing')" class="w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600 transition-all font-medium">
                        üë®‚Äçüç≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    </button>
                `;
            }
            
            if (order.status === 'preparing') {
                actions += `
                    <button onclick="updateOrderStatus('${order.id}', 'ready')" class="w-full bg-green-500 text-white py-3 rounded-lg hover:bg-green-600 transition-all font-medium">
                        ‚úÖ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°
                    </button>
                `;
            }
            
            if (order.status === 'ready') {
                actions += `
                    <button onclick="updateOrderStatus('${order.id}', 'delivered')" class="w-full bg-orange-500 text-white py-3 rounded-lg hover:bg-orange-600 transition-all font-medium">
                        üöö ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
                    </button>
                `;
            }
            

            
            return actions;
        }

        function updateOrderStatus(orderId, status) {
            posDataManager.updateOrderStatus(orderId, status);
            orders = posDataManager.data.orders;
            renderOrders();
            showNotification(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`, 'success');
        }

        function cancelOrder(orderId) {
            if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                updateOrderStatus(orderId, 'cancelled');
            }
        }

        function deleteOrder(orderId) {
            if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ')) {
                posDataManager.deleteOrder(orderId);
                orders = posDataManager.data.orders;
                renderOrders();
                showNotification('‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
            }
        }

        function removeOrderItem(orderId, itemIndex) {
            if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                const order = posDataManager.data.orders.find(o => o.id === orderId);
                if (order && order.items.length > 1) {
                    // Remove the item
                    const removedItem = order.items.splice(itemIndex, 1)[0];
                    
                    // Recalculate totals
                    order.subtotal = order.items.reduce((sum, item) => sum + item.totalPrice, 0);
                    order.total = order.subtotal + order.deliveryFee;
                    
                    posDataManager.saveData();
                    posDataManager.addActivity(`üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${removedItem.name} ‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${order.orderNumber}`);
                    orders = posDataManager.data.orders;
                    renderOrders();
                    showNotification('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
                } else if (order && order.items.length === 1) {
                    // If only one item left, ask to delete entire order
                    if (confirm('‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                        deleteOrder(orderId);
                    }
                }
            }
        }

        function refreshOrders() {
            renderOrders();
            showNotification('‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        }

        // Menu Management
        function renderMenus() {
            const menuGrid = document.getElementById('menuGrid');
            let filteredMenus = menus;
            
            if (currentMenuFilter !== 'all') {
                filteredMenus = menus.filter(menu => menu.category === currentMenuFilter);
            }
            
            if (filteredMenus.length === 0) {
                menuGrid.innerHTML = `
                    <div class="col-span-full text-center py-12">
                        <div class="text-6xl mb-4">üçΩÔ∏è</div>
                        <h3 class="text-2xl font-bold mb-2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ</h3>
                        <p class="text-gray-600">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</p>
                    </div>
                `;
                return;
            }
            
            menuGrid.innerHTML = filteredMenus.map(menu => `
                <div class="menu-card bg-white rounded-xl shadow-lg overflow-hidden ${menu.isNew ? 'ring-2 ring-orange-400' : ''}">
                    <div class="relative">
                        <div class="w-full h-40 bg-gradient-to-br from-orange-100 to-orange-200 flex items-center justify-center overflow-hidden">
                            ${menu.imageUrl ? 
                                `<img src="${menu.imageUrl}" alt="${menu.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                 <div class="w-full h-full flex items-center justify-center text-5xl" style="display:none;">${menu.image}</div>` :
                                `<div class="text-5xl">${menu.image}</div>`
                            }
                        </div>
                        <div class="absolute top-3 right-3 bg-white rounded-full px-3 py-1 font-bold text-orange-600 shadow">
                            ${menu.price}‡∏ø
                        </div>
                        ${menu.isNew ? '<div class="absolute top-3 left-3 bg-red-500 text-white rounded-full px-2 py-1 text-xs font-bold pulse-animation">üÜï ‡πÉ‡∏´‡∏°‡πà!</div>' : ''}
                        ${!menu.available ? '<div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center"><span class="bg-red-500 text-white px-4 py-2 rounded-full font-bold">‡∏´‡∏°‡∏î</span></div>' : ''}
                    </div>
                    <div class="p-4">
                        <h3 class="font-bold text-lg mb-2 text-gray-800">${menu.name}</h3>
                        <div class="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full inline-block mb-2">${menu.category}</div>
                        <p class="text-sm text-gray-600 mb-3">${menu.description}</p>
                        <div class="text-xs text-gray-500 mb-4">‚è±Ô∏è ${menu.prepTime} ‡∏ô‡∏≤‡∏ó‡∏µ</div>
                        <div class="flex space-x-2">
                            <button onclick="toggleMenuAvailability(${menu.id})" class="flex-1 ${menu.available ? 'bg-green-500 hover:bg-green-600' : 'bg-gray-500 hover:bg-gray-600'} text-white py-2 rounded-lg text-sm transition-all">
                                ${menu.available ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢' : '‚ùå ‡∏´‡∏°‡∏î'}
                            </button>
                            <button onclick="editMenu(${menu.id})" class="bg-blue-500 text-white px-3 py-2 rounded-lg hover:bg-blue-600 text-sm transition-all">
                                ‚úèÔ∏è
                            </button>
                            <button onclick="deleteMenu(${menu.id})" class="bg-red-500 text-white px-3 py-2 rounded-lg hover:bg-red-600 text-sm transition-all">
                                üóëÔ∏è
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function filterMenu(category) {
            currentMenuFilter = category;
            
            // Update filter buttons
            document.querySelectorAll('.category-filter').forEach(btn => {
                btn.classList.remove('active', 'bg-orange-500', 'text-white');
                btn.classList.add('bg-gray-200', 'text-gray-700');
            });
            event.target.classList.add('active', 'bg-orange-500', 'text-white');
            event.target.classList.remove('bg-gray-200', 'text-gray-700');
            
            renderMenus();
        }

        function toggleMenuAvailability(menuId) {
            const menu = menus.find(m => m.id === menuId);
            if (menu) {
                menu.available = !menu.available;
                posDataManager.updateMenu(menuId, { available: menu.available });
                menus = posDataManager.data.menus;
                renderMenus();
                showNotification(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`, 'success');
            }
        }

        function deleteMenu(menuId) {
            if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                posDataManager.data.menus = posDataManager.data.menus.filter(m => m.id !== menuId);
                posDataManager.saveData();
                menus = posDataManager.data.menus;
                renderMenus();
                showNotification('‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
            }
        }

        function editMenu(menuId) {
            // For now, just show a simple alert
            showNotification('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', 'info');
        }

        // Add Menu Modal
        function showAddMenuModal() {
            document.getElementById('addMenuModal').classList.remove('hidden');
        }

        function closeAddMenuModal() {
            document.getElementById('addMenuModal').classList.add('hidden');
            document.getElementById('addMenuForm').reset();
            selectedIcon = 'üçΩÔ∏è';
            document.getElementById('selectedIcon').value = 'üçΩÔ∏è';
            document.getElementById('selectedImage').value = '';
            
            // Reset preview
            const previewContainer = document.getElementById('previewContainer');
            previewContainer.innerHTML = 'üçΩÔ∏è';
            previewContainer.className = 'w-32 h-32 mx-auto bg-gray-100 rounded-lg flex items-center justify-center text-4xl';
            
            updateIconSelection();
        }

        function selectIcon(icon) {
            selectedIcon = icon;
            document.getElementById('selectedIcon').value = icon;
            document.getElementById('selectedImage').value = '';
            
            // Update preview to show icon
            const previewContainer = document.getElementById('previewContainer');
            previewContainer.innerHTML = icon;
            previewContainer.className = 'w-32 h-32 mx-auto bg-gray-100 rounded-lg flex items-center justify-center text-4xl';
            
            updateIconSelection();
        }

        function updateIconSelection() {
            document.querySelectorAll('.icon-btn').forEach(btn => {
                btn.classList.remove('bg-orange-500', 'text-white');
                btn.classList.add('border', 'hover:bg-gray-100');
                if (btn.textContent === selectedIcon) {
                    btn.classList.add('bg-orange-500', 'text-white');
                    btn.classList.remove('border', 'hover:bg-gray-100');
                }
            });
        }

        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (file) {
                // Validate file type
                if (!file.type.startsWith('image/')) {
                    showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', 'error');
                    return;
                }

                // Validate file size (max 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    showNotification('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB', 'error');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    const imageUrl = e.target.result;
                    document.getElementById('selectedImage').value = imageUrl;
                    document.getElementById('selectedIcon').value = 'üçΩÔ∏è'; // Reset to default icon
                    
                    // Update preview
                    const previewContainer = document.getElementById('previewContainer');
                    previewContainer.innerHTML = `<img src="${imageUrl}" alt="Preview" class="w-full h-full object-cover rounded-lg">`;
                    previewContainer.className = 'w-32 h-32 mx-auto bg-gray-100 rounded-lg overflow-hidden';
                    
                    // Reset icon selection
                    updateIconSelection();
                    
                    showNotification('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
                };
                reader.readAsDataURL(file);
            }
        }

        // Reports
        function renderReports() {
            posDataManager.updateStats();
            
            document.getElementById('todayRevenue').textContent = posDataManager.data.stats.todaySales.toLocaleString() + '‡∏ø';
            document.getElementById('todayOrdersCount').textContent = posDataManager.data.stats.todayOrders;
            document.getElementById('avgOrderValue').textContent = posDataManager.data.stats.avgOrderValue + '‡∏ø';
            
            // Popular items
            const itemCounts = {};
            const today = new Date().toDateString();
            const todayOrders = orders.filter(o => new Date(o.createdAt).toDateString() === today);
            
            todayOrders.forEach(order => {
                order.items.forEach(item => {
                    itemCounts[item.name] = (itemCounts[item.name] || 0) + item.quantity;
                });
            });
            
            const popularItems = Object.entries(itemCounts)
                .sort(([,a], [,b]) => b - a)
                .slice(0, 5);
            
            document.getElementById('popularItems').innerHTML = popularItems.length > 0 ? 
                popularItems.map(([name, count], index) => `
                    <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                        <div class="flex items-center">
                            <div class="w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3">
                                ${index + 1}
                            </div>
                            <span class="font-medium">${name}</span>
                        </div>
                        <span class="font-bold text-orange-600">${count} ‡∏ä‡∏¥‡πâ‡∏ô</span>
                    </div>
                `).join('') : 
                '<div class="text-center text-gray-500 py-4">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>';
            
            // Recent activities
            document.getElementById('recentActivities').innerHTML = posDataManager.data.activities.length > 0 ?
                posDataManager.data.activities.slice(0, 10).map(activity => `
                    <div class="flex items-center p-2 bg-gray-50 rounded-lg">
                        <div class="text-sm">
                            <div class="font-medium">${activity.message}</div>
                            <div class="text-gray-500 text-xs">${new Date(activity.timestamp).toLocaleString('th-TH')}</div>
                        </div>
                    </div>
                `).join('') :
                '<div class="text-center text-gray-500 py-4">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</div>';
        }

        // Payment QR Code Functions
        function handleQRCodeUpload(event) {
            const file = event.target.files[0];
            if (file) {
                // Validate file type
                if (!file.type.startsWith('image/')) {
                    showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', 'error');
                    return;
                }

                // Validate file size (max 2MB)
                if (file.size > 2 * 1024 * 1024) {
                    showNotification('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2MB', 'error');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    const qrCodeUrl = e.target.result;
                    
                    // Update preview
                    const previewContainer = document.getElementById('qrPreviewContainer');
                    previewContainer.innerHTML = `<img src="${qrCodeUrl}" alt="QR Code" class="w-full h-full object-cover rounded-lg">`;
                    
                    // Save to localStorage temporarily
                    localStorage.setItem('tempQRCode', qrCodeUrl);
                    
                    showNotification('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
                };
                reader.readAsDataURL(file);
            }
        }

        function getPaymentInfo(order) {
            const showQR = document.getElementById('showQRInOrder')?.checked !== false;
            const paymentSettings = JSON.parse(localStorage.getItem('paymentSettings') || '{}');
            
            if (!showQR || !paymentSettings.qrCodeUrl) {
                return '';
            }

            return `
                <div class="mt-4 p-4 bg-green-50 rounded-lg border border-green-200">
                    <div class="flex items-center justify-between mb-3">
                        <h4 class="font-bold text-green-800">üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô QR Code</h4>
                        <button onclick="toggleQRCode('${order.id}')" class="text-green-600 hover:text-green-800 text-sm">
                            <span id="qr-toggle-${order.id}">üëÅÔ∏è ‡πÅ‡∏™‡∏î‡∏á</span>
                        </button>
                    </div>
                    <div id="qr-section-${order.id}" class="hidden">
                        <div class="text-center">
                            <div class="inline-block p-3 bg-white rounded-lg shadow-md mb-3">
                                <img src="${paymentSettings.qrCodeUrl}" alt="QR Code ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" class="w-32 h-32 mx-auto">
                            </div>
                            <div class="text-sm text-gray-700 space-y-1">
                                <div><strong>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:</strong> ${paymentSettings.bankName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                                <div><strong>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> ${paymentSettings.accountNumber || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                                <div><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> ${paymentSettings.accountName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                                <div class="font-bold text-green-600 text-lg">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${order.total}‡∏ø</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function toggleQRCode(orderId) {
            const qrSection = document.getElementById(`qr-section-${orderId}`);
            const toggleText = document.getElementById(`qr-toggle-${orderId}`);
            
            if (qrSection.classList.contains('hidden')) {
                qrSection.classList.remove('hidden');
                toggleText.textContent = 'üôà ‡∏ã‡πà‡∏≠‡∏ô';
            } else {
                qrSection.classList.add('hidden');
                toggleText.textContent = 'üëÅÔ∏è ‡πÅ‡∏™‡∏î‡∏á';
            }
        }

        // Settings
        function saveStoreSettings() {
            const settings = {
                storeName: document.getElementById('storeName').value,
                storePhone: document.getElementById('storePhone').value,
                storeAddress: document.getElementById('storeAddress').value
            };
            
            localStorage.setItem('storeSettings', JSON.stringify(settings));
            showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        }

        function savePaymentSettings() {
            const tempQRCode = localStorage.getItem('tempQRCode');
            const settings = {
                bankName: document.getElementById('bankName').value,
                accountNumber: document.getElementById('accountNumber').value,
                accountName: document.getElementById('accountName').value,
                qrCodeUrl: tempQRCode || JSON.parse(localStorage.getItem('paymentSettings') || '{}').qrCodeUrl
            };
            
            localStorage.setItem('paymentSettings', JSON.stringify(settings));
            localStorage.removeItem('tempQRCode');
            showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        }

        function saveSystemSettings() {
            const settings = {
                soundNotification: document.getElementById('soundNotification').checked,
                autoUpdate: document.getElementById('autoUpdate').checked,
                showQRInOrder: document.getElementById('showQRInOrder').checked,
                deliveryFee: parseInt(document.getElementById('deliveryFee').value),
                avgPrepTime: parseInt(document.getElementById('avgPrepTime').value)
            };
            
            localStorage.setItem('systemSettings', JSON.stringify(settings));
            showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        }

        function loadPaymentSettings() {
            const paymentSettings = JSON.parse(localStorage.getItem('paymentSettings') || '{}');
            
            if (paymentSettings.bankName) {
                document.getElementById('bankName').value = paymentSettings.bankName;
            }
            if (paymentSettings.accountNumber) {
                document.getElementById('accountNumber').value = paymentSettings.accountNumber;
            }
            if (paymentSettings.accountName) {
                document.getElementById('accountName').value = paymentSettings.accountName;
            }
            if (paymentSettings.qrCodeUrl) {
                const previewContainer = document.getElementById('qrPreviewContainer');
                previewContainer.innerHTML = `<img src="${paymentSettings.qrCodeUrl}" alt="QR Code" class="w-full h-full object-cover rounded-lg">`;
            }
        }

        function loadSystemSettings() {
            const systemSettings = JSON.parse(localStorage.getItem('systemSettings') || '{}');
            
            if (systemSettings.hasOwnProperty('soundNotification')) {
                document.getElementById('soundNotification').checked = systemSettings.soundNotification;
            }
            if (systemSettings.hasOwnProperty('autoUpdate')) {
                document.getElementById('autoUpdate').checked = systemSettings.autoUpdate;
            }
            if (systemSettings.hasOwnProperty('showQRInOrder')) {
                document.getElementById('showQRInOrder').checked = systemSettings.showQRInOrder;
            }
            if (systemSettings.deliveryFee) {
                document.getElementById('deliveryFee').value = systemSettings.deliveryFee;
            }
            if (systemSettings.avgPrepTime) {
                document.getElementById('avgPrepTime').value = systemSettings.avgPrepTime;
            }
        }

        // Utility Functions
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        function playNotificationSound() {
            posDataManager.playNotificationSound();
        }

        // Form Handlers
        document.getElementById('addMenuForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const imageUrl = document.getElementById('selectedImage').value;
            const icon = document.getElementById('selectedIcon').value;
            
            const newMenu = {
                name: document.getElementById('menuName').value,
                category: document.getElementById('menuCategory').value,
                price: parseInt(document.getElementById('menuPrice').value),
                description: document.getElementById('menuDescription').value,
                prepTime: parseInt(document.getElementById('menuPrepTime').value),
                image: icon,
                imageUrl: imageUrl || null,
                available: true,
                isNew: true
            };
            
            posDataManager.addMenu(newMenu);
            menus = posDataManager.data.menus;
            renderMenus();
            closeAddMenuModal();
            showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        });

        // Initialize
        function init() {
            renderOrders();
            renderMenus();
            renderReports();
            updateIconSelection();
            loadPaymentSettings();
            loadSystemSettings();
            
            // Update current time
            document.getElementById('currentTime').textContent = 
                new Date().toLocaleTimeString('th-TH');
        }

        // Start the application
        init();
    </script>

    <style>
        /* Switch styles for settings */
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: #ea580c;
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }
    </style>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'97c77f5e56bef916',t:'MTc1NzQyOTQyMi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
